https://github.com/rickardlindberg/brainfuck.git<!doctype html>
<html lang="en">

	<head>
		<meta charset="utf-8">

		<title>Esolang talk</title>

		<meta name="description" content="LiveScript talk at Functional Programmers Paris Meetup, November 26th 2013">
		<meta name="author" content="NEWTON" >

		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

		<link rel="stylesheet" href="css/reveal.min.css">
		<link rel="stylesheet" href="css/theme/solarized.css" id="theme">

		<!-- For syntax highlighting -->
		<link rel="stylesheet" href="lib/css/zenburn.css">

		<!-- If the query includes 'print-pdf', use the PDF print sheet -->
		<script>
			document.write( '<link rel="stylesheet" href="css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
		</script>

		<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->
	</head>

	<body>

		<div class="reveal">

			<!-- Any section element inside of this container is displayed as a slide -->
			<div class="slides">
				<section>
					<h1>Fuck Your brain for a great good</h1> <br />
					<h3>by Ankit Shukla</h3>
					
					
				</section>
<section>
<h3>Esoteric programming language</h3>
<code>"An esoteric programming language is a computer programming language designed
to experiment with weird ideas, to be hard to program in, or as a joke, rather than for practical use."
</code>
</section>			
			
			<section>
			<h3>Esoteric languages</h3>
<ul>
<li>&nbsp Have Ultimate fun !</li>
<li>&nbsp Mess with your brain !</li> 
<li>&nbsp Explore new paradigms !</li>
			</section>
	</ul>
<section>
<h3>Today's Menu</h3>
<ul>
<li>Turing-completeness</li> 
<li>Brainfuck</li>
<li>Piet</li>
<li>Fractran</li>
</ul>
</section>

<section>
<h3>Turing machine</h3>
Can solve all possible algorithmic computations<br />

<ul><li>Infinite ribbon of (finite state) cells</li>
<li>Left / right movement</li>
<li>Choice and action on current cell
</li></ul>

</section>

<section>
<h3>Turing complete languages</h3>
" A given programming language is said to be Turing -             complete if it can be shown that it is computationally             equivalent to a Turing machine."
</section>

<section>
<h3>BRAINFUCK</h3>

    ♥ Invented in 1993 by Urban Müller 
   <br/> ♥  Goal : Turing-Complete language which needs a minimal compiler only.
    <br />♥  Müller's Amiga compiler was 240 bytes in size
</section>

<section>
<h3>Basics</h3>
  ✈ The idea behind Brainfuck is memory manipulation.
<br />
    ✈ You are given an array of 30,000 1byte memory blocks
<br />
     ✈ A Brainfuck program has an implicit byte pointer, 
       called "the pointer" initially all set to zero.
<br />
     ✈ Within this array, you can increase the memory 
      pointer, increase the value at the memory pointer, etc.
</section>

<section><h3>Operators</h3>
<pre><code>
> 	       becomes 	       ++p;
< 	       becomes 	        --p;
+         becomes 	        ++*p;
- 	       becomes 	        --*p;
. 	       becomes 	        putchar(*p);
,           becomes 	        *p = getchar();
[           becomes 	         while (*p) {
] 	        becomes 	 }
                 
               ツ  Test loop  ⇒   [     ]
                ツ  Byte IO      ⇒   ,     .
                
</code></pre>
</section>



<section>
<h3>Rules</h3>
®  Characters besides the 8 operators should be considered comments. <br />
  ®  All memory blocks on the "array" are set to zero at the beginning of the program.<br /> 
  ®  And the memory pointer starts out on the very left most memory block. <br />
  ®   Loops may be nested as many times as you want. 
         But all [ must have a corresponding ].
</section>


<section>
<h3>Brainfuck</h3><ul>
<li>Left / right movement ⇒ < > </li>
<li>Increment / decrement ⇒ + -</li>
<li>Test “loop” ⇒ [ ]</li>
<li>Byte IO ⇒ , .</li>
</ul>

"Infinite" buffer of byte cells
</section>


<section><h3>Hello World</h3> 
<pre>
<code>
+++++ +++               Set Cell #0 to 8
[
    >++++       Add 4 to Cell #1; this will always set Cell#1 to 4
    [                   as the cell will be cleared by the loop
        >++             Add 4*2 to Cell #2
        >+++            Add 4*3 to Cell #3
        >+++            Add 4*3 to Cell #4
        >+              Add 4 to Cell #5
        <<<<-           Decrement the loop counter in Cell #1
    ]                   Loop till Cell #1 is zero
    >+                  Add 1 to Cell #2
    >+                  Add 1 to Cell #3
    >-                  Subtract 1 from Cell #4
    >>+                 Add 1 to Cell #6
    [<]          Move back to the first zero cell you find; this will
               be Cell #1 which was cleared by the previous loop
    <-           Decrement the loop Counter in Cell #0
]                   Loop till Cell #0 is zero
</code></pre>
</section>

<section>
<h3>Hello Print</h3>

<pre><code>
The result of this is:
Cell No :   0   1   2   3   4   5   6
Contents:   0   0  72 104  88  32   8
Pointer :   ^


>>.                     Cell #2 has value 72 which is 'H'
>---.                   Subtract 3 from Cell #3 to get 101 which is 'e'
+++++ ++..+++.          Likewise for 'llo' from Cell #3
>>.                     Cell #5 is 32 for the space
<-.                     Subtract 1 from Cell #4 for 87 to give a 'W'
<.                      Cell #3 was set to 'o' from the end of 'Hello'
+++.----- -.----- ---.  Cell #3 for 'rl' and 'd'
>>+.                    Add 1 to Cell #5 gives us an exclamation point
>++.                    And finally a newline from Cell #6

</code></pre>

</section>



<section>
<h3>⚥JOKE KILLER</h3>
<img src="g.png" alt="" height="550" width= "550">

</section>

		<script src="lib/js/head.min.js"></script>
		<script src="js/reveal.min.js"></script>

		<script>

		
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,

				theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
				transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none

				// Optional libraries used to extend on reveal.js
				dependencies: [
					{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
					{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
					{ src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
				]
			});

		</script>

	</body>
</html>
